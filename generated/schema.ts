// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("buyVolume", Value.fromBigInt(BigInt.zero()));
    this.set("sellVolume", Value.fromBigInt(BigInt.zero()));
    this.set("volume", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyVolume(): BigInt {
    let value = this.get("buyVolume");
    return value!.toBigInt();
  }

  set buyVolume(value: BigInt) {
    this.set("buyVolume", Value.fromBigInt(value));
  }

  get sellVolume(): BigInt {
    let value = this.get("sellVolume");
    return value!.toBigInt();
  }

  set sellVolume(value: BigInt) {
    this.set("sellVolume", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    return value!.toBigInt();
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get contractSellOrders(): Array<string> {
    let value = this.get("contractSellOrders");
    return value!.toStringArray();
  }

  set contractSellOrders(value: Array<string>) {
    this.set("contractSellOrders", Value.fromStringArray(value));
  }

  get contractBuyOrders(): Array<string> {
    let value = this.get("contractBuyOrders");
    return value!.toStringArray();
  }

  set contractBuyOrders(value: Array<string>) {
    this.set("contractBuyOrders", Value.fromStringArray(value));
  }

  get receivedBuyOrders(): Array<string> {
    let value = this.get("receivedBuyOrders");
    return value!.toStringArray();
  }

  set receivedBuyOrders(value: Array<string>) {
    this.set("receivedBuyOrders", Value.fromStringArray(value));
  }

  get placedBuyOrders(): Array<string> {
    let value = this.get("placedBuyOrders");
    return value!.toStringArray();
  }

  set placedBuyOrders(value: Array<string>) {
    this.set("placedBuyOrders", Value.fromStringArray(value));
  }

  get sellOrders(): Array<string> {
    let value = this.get("sellOrders");
    return value!.toStringArray();
  }

  set sellOrders(value: Array<string>) {
    this.set("sellOrders", Value.fromStringArray(value));
  }
}

export class SellOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("seller", Value.fromString(""));
    this.set("contract", Value.fromString(""));
    this.set("token", Value.fromBigInt(BigInt.zero()));
    this.set("expiration", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SellOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SellOrder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SellOrder", id.toString(), this);
    }
  }

  static load(id: string): SellOrder | null {
    return changetype<SellOrder | null>(store.get("SellOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get token(): BigInt {
    let value = this.get("token");
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set("token", Value.fromBigInt(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value!.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }
}

export class BuyOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("buyer", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("contract", Value.fromString(""));
    this.set("token", Value.fromBigInt(BigInt.zero()));
    this.set("expiration", Value.fromBigInt(BigInt.zero()));
    this.set("offer", Value.fromBigInt(BigInt.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BuyOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BuyOrder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BuyOrder", id.toString(), this);
    }
  }

  static load(id: string): BuyOrder | null {
    return changetype<BuyOrder | null>(store.get("BuyOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get token(): BigInt {
    let value = this.get("token");
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set("token", Value.fromBigInt(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value!.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get offer(): BigInt {
    let value = this.get("offer");
    return value!.toBigInt();
  }

  set offer(value: BigInt) {
    this.set("offer", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }
}
